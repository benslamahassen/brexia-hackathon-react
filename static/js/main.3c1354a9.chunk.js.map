{"version":3,"sources":["utils/flowchart.js","Components/Navbar/index.js","Components/Navbar/navbar.js","Pages/Editor/Components/Sidebar/index.js","Pages/Editor/Components/Sidebar/sidebar.js","Components/Flowchart/flowchart.js","Components/Flowchart/index.js","Pages/Editor/Components/SelectModal/index.js","Pages/Editor/Components/SelectModal/selectModal.js","Pages/Editor/Components/CombineModal/combineModal.js","utils/testUtils.js","Pages/Editor/index.js","Pages/Editor/editor.js","App.js","serviceWorker.js","index.js"],"names":["addNodeToChart","model","_ref","eventAction","name","_ref$color","color","_ref$posX","posX","_ref$posY","posY","_ref$output","output","_ref$extras","extras","newNode","SRD","setPosition","addInPort","addOutPort","addListener","selectionChanged","addNode","getPreviousNode","currentNode","Object","keys","length","getOutPorts","links","map","key","sourcePort","parent","getNodeColumns","nodeType","columns","outColumn","sortGraph","nodes","Map","forEach","nodeKey","set","sortOp","TopologicalSort","linkKey","link","sourceNodeKey","id","targetNodeKey","targetPort","addEdge","sorted","sort","entriesKeys","toConsumableArray","entries","instructions","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","node","transformation","push","query","joinColumnTuples","tuples","err","return","console","log","Navbar","react_default","a","createElement","AppBar_default","className","position","Button_default","onClick","Sidebar","files","addFile","refreshRenderKey","updateSeletction","randomCoordinates","max","min","Math","floor","random","addTransformationNodeToChart","transType","file","fileIcon","extension","e","stopPropagation","addFileNodeToChart","src","alt","renderFiles","es","onDrop","onFileDialogCancel","require","Flowchart","engine","main","diagramEngine","SelectModal","state","searchKeyword","input","operations","checkedColumns","filteredColumns","colmuns","keyword","filter","includes","addOperation","persist","operation","target","innerText","_this","setState","prevState","concat","removeOperation","newOperations","splice","saveHandler","_this$props","props","modalData","toggleModal","_this$state","el","slice","indexOf","join","firstSourceName","split","handleCheckbox","nodeId","newCheckedColumns","checked","_this2","this","_this$props2","isOpen","_this$state2","Dialog_default","fullScreen","open","Toolbar_default","label","DialogContent_default","type","onChange","Chip_default","Component","combineModal","searchKeywordOne","searchKeywordTwo","inputOne","inputTwo","removeInput","num","newInput","defineProperty","combineTuples","Set","secondColumns","addInput","Table_default","TableHead_default","TableRow_default","TableCell_default","TableBody_default","uploadFile","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","axios","get","apiUrl","sent","data","abrupt","cols","t0","stop","_x","_x2","apply","arguments","Editor","nodeIsSelected","selectModalIsOpen","combineModalIsOpen","groupByModalIsOpen","isSelected","entity","forceUpdate","editNodeHandler","firstPreviousNode","objectSpread","secondPreviousNode","secondSourceName","secondPreviousNodecolumns","_e","newFile","slicedToArray","renderKey","sideBarProps","selectModalProps","combineModalProps","combineModal_combineModal","installDefaultFactories","setDiagramModel","App","CssBaseline_default","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c1354a9.chunk.js","sourcesContent":["import * as SRD from 'storm-react-diagrams'\nimport { TopologicalSort } from 'topological-sort'\nimport { Map } from 'core-js';\n\nexport const addNodeToChart = (model, { name, color = 'darkgrey', posX = 50, posY = 50, output = false, extras = {} }, eventAction) => {\n  const newNode = new SRD.DefaultNodeModel(name, color)\n  newNode.setPosition(posX, posY)\n  newNode.addInPort('Out')\n  newNode.extras = extras\n  output && newNode.addOutPort('In')\n  output && newNode.addListener({ selectionChanged: eventAction, })\n  model.addNode(newNode)\n}\n\nexport const getPreviousNode = currentNode => {\n  // assuming only out port\n  if (Object.keys(currentNode).length === 0) return []\n  const linksKey = Object.keys(currentNode.getOutPorts()[0].links)\n  return linksKey.map(key => currentNode.getOutPorts()[0].links[key].sourcePort.parent)\n}\n\nexport const getNodeColumns = currentNode => {\n  if (!currentNode) return []\n  if (currentNode.extras.nodeType === 'file') {\n    return currentNode.extras.columns\n  } else {\n    const columns = currentNode.extras.outColumn\n    return columns ? columns : []\n  }\n}\n\nexport const sortGraph = model => {\n  const nodes = new Map()\n  Object.keys(model.nodes).forEach(nodeKey => nodes.set(nodeKey, model.nodes[nodeKey]))\n\n  const sortOp = new TopologicalSort(nodes)\n\n  Object.keys(model.links).forEach(linkKey => {\n    const link = model.links[linkKey]\n    const sourceNodeKey = link.sourcePort.parent.id\n    const targetNodeKey = link.targetPort.parent.id\n    sortOp.addEdge(sourceNodeKey, targetNodeKey)\n  })\n\n  const sorted = sortOp.sort();\n  const entriesKeys = [...sorted.entries()]\n\n  const instructions = []\n  for (const el of entriesKeys) {\n    const entity = el[1]\n    const { extras } = entity.node\n    if (extras.transformation) {\n      if (extras.transformation === 'Select') instructions.push({ transformation: extras.transformation, query: extras.query })\n      if (extras.transformation === 'Combine') instructions.push({ transformation: extras.transformation, joinColumnTuples: extras.tuples })\n    }\n  }\n\n  console.log({ instructions })\n}\n","import Navbar from './navbar'\nexport default Navbar","import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Button from '@material-ui/core/Button'\nimport './styles.scss'\nimport { sortGraph } from 'utils/flowchart';\n\nexport default function navbar({ model }) {\n\n  const traversGraph = () => sortGraph(model)\n  return (\n    <div>\n      <AppBar className='navbar' position=\"static\">\n        <Button color='inherit' onClick={traversGraph} >Run</Button>\n        <Button color='inherit'>Preview</Button>\n      </AppBar>\n    </div>\n  )\n}\n","import Sidebar from './sidebar'\nexport default Sidebar","import React from 'react'\nimport Dropzone from 'react-dropzone'\n\nimport './styles.scss'\nimport { addNodeToChart } from 'utils/flowchart'\n\nexport default function sidebar({ model, files, addFile, refreshRenderKey, updateSeletction }) {\n\n  const randomCoordinates = (max, min) => Math.floor(Math.random() * (max - min)) + min\n\n  const addFileNodeToChart = (e, file) => {\n    e.stopPropagation()\n    addNodeToChart(model, {\n      name: file.name,\n      color: 'blue',\n      posX: randomCoordinates(900, 600),\n      posY: randomCoordinates(600, 100),\n      output: false,\n      extras: {\n        extension: file.extension,\n        nodeType: 'file',\n        columns: file.columns\n      }\n    }, updateSeletction)\n    refreshRenderKey()\n    console.log({ model })\n  }\n\n  const addTransformationNodeToChart = (name, color) => {\n    addNodeToChart(model, {\n      name, color,\n      posX: randomCoordinates(600, 100),\n      posY: randomCoordinates(600, 100),\n      output: true,\n      extras: {\n        nodeType: 'transformation',\n        transType: name\n      }\n    }, updateSeletction)\n    refreshRenderKey()\n    console.log({ model })\n  }\n\n  const renderFiles = (files) => files.map((file, key) => {\n    const fileIcon = file.extension === 'csv' ? 'https://png.icons8.com/wired/50/000000/csv.png' : 'https://png.icons8.com/wired/50/000000/ms-excel.png'\n    return (<button key={key} className='element' >\n      <img onClick={e => addFileNodeToChart(e, file)} className='icon' src={fileIcon} alt={file.name} />\n      <div className='element-title' >{file.name}</div>\n    </button>)\n  })\n\n  return (\n    <div className='sidebar'>\n      <div className='section'>\n        <div className='title'>Transformations</div>\n        <div className='elements-column'>\n          <button onClick={() => addTransformationNodeToChart('Select', 'red')} className='element'>Select</button>\n          <button onClick={() => addTransformationNodeToChart('Combine', 'green')} className='element'>Combine</button>\n          <button onClick={() => addTransformationNodeToChart('GroupBy', 'orange')} className='element'>GroupBy</button>\n        </div>\n      </div>\n      <div className='section'>\n        <div className='title'>Datasets</div>\n        <div className='elements-grid'>\n          {renderFiles(files)}\n        </div>\n        <div className=\"dropzone-container\">\n          <Dropzone\n            onDrop={addFile}\n            onFileDialogCancel={() => console.log('cancel')}\n          >\n            Drag files here\n          </Dropzone>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { DiagramWidget } from 'storm-react-diagrams'\n\nimport './styles.scss'\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nexport default function flowchart({ engine }) {\n  return (\n    <div className='flowchart'>\n      <DiagramWidget diagramEngine={engine} />\n    </div>\n  )\n}\n","import Flowchart from './flowchart';\nexport default Flowchart","import SelectModal from './selectModal'\nexport default SelectModal","import React, { Component } from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Dialog from '@material-ui/core/Dialog'\nimport Button from '@material-ui/core/Button'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport Chip from '@material-ui/core/Chip';\n\nimport './styles.scss'\n\nexport default class selectModal extends Component {\n\n  state = {\n    searchKeyword: '',\n    input: '',\n    operations: [],\n    checkedColumns: {}\n  }\n\n  filteredColumns = (colmuns, keyword) => {\n    if (!colmuns) return []\n    if (!keyword) return colmuns\n    return colmuns.filter(e => e.includes(keyword))\n  }\n\n  addOperation = e => {\n    e.persist()\n    const operation = e.target.innerText === 'add' ? this.state.input : e.target.innerText\n    this.setState(prevState => ({ operations: [...prevState.operations, operation], input: '' }))\n  }\n\n  removeOperation = (e, key) => {\n    const newOperations = this.state.operations\n    newOperations.splice(key, 1)\n    this.setState({ operations: newOperations })\n  }\n\n  saveHandler = () => {\n    const { modalData, toggleModal, model } = this.props\n    const { operations, checkedColumns } = this.state\n    const columns = Object.keys(checkedColumns).filter(el => el.includes(modalData.id)).map(el => (el.slice(el.indexOf('*') + 1))) //build comma separated column list\n    const query = `SELECT ${columns.join(', ')} FROM ${modalData.firstSourceName.split('.')[0]} ${operations.join(' ')}` //build query\n    model.nodes[modalData.id].extras = { outColumn: columns, transformation: 'Select', query }\n    toggleModal()\n  }\n\n  handleCheckbox = (e, nodeId) => {\n    const newCheckedColumns = this.state.checkedColumns\n    newCheckedColumns[nodeId + '*' + e.target.name] = e.target.checked\n    this.setState({ checkedColumns: newCheckedColumns })\n  }\n\n  render() {\n    const { isOpen, toggleModal, modalData } = this.props\n    const { searchKeyword, operations, checkedColumns } = this.state\n    return (\n      <div >\n        <Dialog\n          className='select-modal'\n          fullScreen\n          open={isOpen}\n        >\n          <AppBar >\n            <Toolbar>\n              <Button color='inherit' onClick={toggleModal} label='Close'>\n                Close\n              </Button>\n              <Button color='inherit' onClick={this.saveHandler}>\n                save\n              </Button>\n            </Toolbar>\n          </AppBar>\n          <DialogContent className='select-diaglog'>\n            <div className='select-modal-content' >\n              <div className='columns'>\n                <input type='text' className='input-select' onChange={e => e.persist() || this.setState({ searchKeyword: e.target.value })} />\n                {this.filteredColumns(modalData.columns, searchKeyword).map((el, key) => <span key={key}>\n                  <input checked={checkedColumns[modalData.id + '*' + el]} name={el} type='checkbox' onChange={e => this.handleCheckbox(e, modalData.id)} />\n                  {' ' + el}\n                </span>)}\n              </div>\n              <div className='input'>\n                <div>\n                  <div className=\"row\">\n                    {operations.map((el, key) => <Chip onClick={e => this.removeOperation(e, key)} key={key} className='column' label={el} />)}\n                  </div>\n                </div>\n              </div>\n              <div className='operations'>\n\n                <div className='row'>\n                  <Chip onClick={this.addOperation} className='column' label='AND' />\n                  <Chip onClick={this.addOperation} className='column' label='OR' />\n                  <Chip onClick={this.addOperation} className='column' label='NOT' />\n                </div>\n\n                <div className='row'>\n                  <Chip onClick={this.addOperation} className='column' label='LIKE' />\n                  <span onClick={this.addOperation} className='column' />\n                  <Chip onClick={this.addOperation} className='column' label='WHERE' />\n                </div>\n\n                <div className='row'>\n                  <Chip onClick={this.addOperation} className='column' label='=' />\n                  <Chip onClick={this.addOperation} className='column' label='>' />\n                  <Chip onClick={this.addOperation} className='column' label='<' />\n                  <Chip onClick={this.addOperation} className='column' label='<>' />\n                </div>\n\n                <div className='row'>\n                  <Chip onClick={this.addOperation} className='column' label='>=' />\n                  <span className='column' />\n                  <Chip onClick={this.addOperation} className='column' label='<=' />\n                </div>\n\n                <div className='row'>\n                  <Chip onClick={this.addOperation} className='column' label='AVG' />\n                  <Chip onClick={this.addOperation} className='column' label='MIN' />\n                  <Chip onClick={this.addOperation} className='column' label='MAX' />\n                </div>\n\n                <div className='row'>\n                  <Chip onClick={this.addOperation} className='column' label='(' />\n                  <Chip onClick={this.addOperation} className='column' label='+' />\n                  <Chip onClick={this.addOperation} className='column' label='-' />\n                  <Chip onClick={this.addOperation} className='column' label='*' />\n                  <Chip onClick={this.addOperation} className='column' label='/' />\n                  <Chip onClick={this.addOperation} className='column' label=')' />\n                </div>\n\n                <div className=\"row\">\n                  <input onChange={e => e.persist() || this.setState({ input: e.target.value })} type=\"text\" className='column input-select' />\n                  <Chip onClick={this.addOperation} label='add' />\n                </div>\n\n              </div>\n\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Dialog from '@material-ui/core/Dialog'\nimport Button from '@material-ui/core/Button'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\n\nimport './styles.scss'\n\nexport default class combineModal extends Component {\n\n  state = {\n    searchKeywordOne: '',\n    searchKeywordTwo: '',\n    inputOne: [],\n    inputTwo: []\n  }\n\n  filteredColumns = (colmuns, keyword) => {\n    if (!colmuns) return []\n    if (!keyword) return colmuns\n    return colmuns.filter(e => e.includes(keyword))\n  }\n\n  removeInput = (num, key) => {\n    const newInput = this.state[`input${num}`]\n    newInput.splice(key, 1)\n    this.setState({ [`input${num}`]: newInput })\n  }\n\n  saveHandler = () => {\n    const { modalData, toggleModal, model } = this.props\n    const { inputOne, inputTwo } = this.state\n\n    const arr = inputOne.length >= inputTwo.length ? inputOne : inputTwo\n    const combineTuples = arr.map((e, key) => [inputOne[key], inputTwo[key]])\n\n    const outColumn = [...new Set(modalData.columns.concat(modalData.secondColumns))]\n\n    model.nodes[modalData.id].extras = { outColumn, transformation: 'Combine', tuples: combineTuples }\n    toggleModal()\n  }\n\n  addInput = (num, e) => {\n    this.setState(prevState => ({ [`input${num}`]: [...prevState[`input${num}`], e] }))\n  }\n\n  render() {\n    const { isOpen, toggleModal, modalData } = this.props\n    const { searchKeywordOne, searchKeywordTwo, inputOne, inputTwo } = this.state\n\n    return (\n      <div >\n        <Dialog\n          className='select-modal'\n          fullScreen\n          open={isOpen}\n        >\n          <AppBar >\n            <Toolbar>\n              <Button color='inherit' onClick={toggleModal} label='Close'>\n                Close\n              </Button>\n              <Button color='inherit' onClick={this.saveHandler}>\n                save\n              </Button>\n            </Toolbar>\n          </AppBar>\n          <DialogContent className='select-diaglog'>\n            <div className='select-modal-content' >\n              <div className='columns'>\n                <input type='text' className='input-select' onChange={e => e.persist() || this.setState({ searchKeywordOne: e.target.value })} />\n                {this.filteredColumns(modalData.columns, searchKeywordOne).map((el, key) => <div key={key} onClick={e => this.addInput('One', el)} >{el}</div>)}\n              </div>\n              <div className='input'>\n\n                <Table >\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>INPUT 1</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {inputOne.map((el, key) => {\n                      return (<TableRow key={key} onClick={() => this.removeInput('One', key)} >\n                        <TableCell>{el}</TableCell>\n                      </TableRow>)\n                    })}\n                  </TableBody>\n                </Table>\n\n                <Table >\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>INPUT 2</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {inputTwo.map((el, key) => {\n                      return (<TableRow key={key} onClick={() => this.removeInput('Two', key)} >\n                        <TableCell>{el}</TableCell>\n                      </TableRow>)\n                    })}\n                  </TableBody>\n                </Table>\n\n              </div>\n\n              <div className='columns'>\n\n                <input type='text' className='input-select' onChange={e => e.persist() || this.setState({ searchKeywordTwo: e.target.value })} />\n                {this.filteredColumns(modalData.secondColumns, searchKeywordTwo).map((el, key) => <div key={key} onClick={e => this.addInput('Two', el)} >{el}</div>)}\n\n              </div>\n\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    )\n  }\n}\n","import axios from 'axios'\n\nconst apiUrl = process.env.REACT_APP_API_URL\n\nexport const uploadFile = async (file, type) => {\n  try {\n    const response = await axios.get(apiUrl + '/cols/' + file + '/' + type)\n    console.log({ response: response.data })\n    return response.data.cols\n  } catch (e) { return [] }\n}\n\n\n\nconst instructions = [\n  { transformation: \"Select\", query: \"SELECT Column1, Column2 FROM testFile1 \" },\n  { transformation: \"Select\", query: \"SELECT ColumnA, ColumnB FROM testFile2 \" },\n  { transformation: \"Combine\", joinColumnTuples: ['Column1', 'ColumnA'] }\n]","import Editor from './editor'\nexport default Editor","import React, { Component } from 'react'\nimport Button from '@material-ui/core/Button'\n\nimport Sidebar from './Components/Sidebar/index'\nimport Flowchart from 'Components/Flowchart'\n\nimport SelectModal from './Components/SelectModal';\nimport CombineModal from './Components/CombineModal/combineModal';\nimport { getNodeColumns, getPreviousNode } from 'utils/flowchart';\n\nimport './styles.scss'\nimport { uploadFile } from 'utils/testUtils';\n\nexport default class editor extends Component {\n\n  state = {\n    nodeIsSelected: false,\n    files: [\n      {\n        name: 'testFile.csv',\n        extension: 'csv',\n        columns: [\n          'Csqdd',\n          'Caaaaa',\n          'Cccccc',\n          'Cttttt',\n          'Copoo',\n          'Coppppp',\n          'Cdsd'\n        ]\n      },\n      {\n        name: 'TestFile.xlsx',\n        extension: 'xlsx',\n        columns: [\n          'Testsqdd',\n          'Testaaaaa',\n          'TestCccccc',\n          'Testttttt',\n          'Testopoo',\n          'Testoppppp',\n          'Testdsd'\n        ]\n      },\n    ],\n    selectModalIsOpen: false,\n    combineModalIsOpen: false,\n    groupByModalIsOpen: false,\n    modalData: {},\n    instructions: []\n  }\n\n  updateSeletction = e => this.setState({ nodeIsSelected: e.isSelected && ['Select', 'Combine', 'GroupBy'].includes(e.entity.name) ? e.entity : null })\n  refreshRenderKey = () => this.forceUpdate()\n\n  editNodeHandler = () => {\n    const { nodeIsSelected } = this.state\n\n    const firstPreviousNode = getPreviousNode(nodeIsSelected)[0]\n    const firstSourceName = firstPreviousNode ? firstPreviousNode.extras.nodeType === 'file' ? firstPreviousNode.name\n      : firstPreviousNode.id\n      : {}\n\n    const columns = getNodeColumns(firstPreviousNode)\n    switch (nodeIsSelected.name) {\n      case 'Select':\n        this.setState(prevState => ({\n          selectModalIsOpen: !prevState.selectModalIsOpen,\n          modalData: {\n            ...nodeIsSelected,\n            columns,\n            firstSourceName: firstSourceName\n          }\n        }))\n        break\n      case 'Combine':\n        const secondPreviousNode = getPreviousNode(nodeIsSelected)[1]\n        const secondSourceName = secondPreviousNode ? secondPreviousNode.extras.nodeType === 'file' ? secondPreviousNode.name\n          : secondPreviousNode.id\n          : {}\n        const secondPreviousNodecolumns = getNodeColumns(secondPreviousNode)\n        this.setState(prevState => ({\n          combineModalIsOpen: !prevState.combineModalIsOpen,\n          modalData: {\n            ...nodeIsSelected,\n            columns,\n            secondColumns: secondPreviousNodecolumns,\n            firstSourceName,\n            secondSourceName\n          }\n        }))\n        break\n      case 'GroupBy':\n        this.setState(prevState => ({\n          groupByModalIsOpen: !prevState.groupByModalIsOpen,\n          modalData: {\n            ...nodeIsSelected,\n            columns,\n            firstSourceName: firstSourceName\n          }\n        }))\n        break\n      default:\n    }\n  }\n\n  addFile = async e => {\n    const [file] = e\n\n    if (file.type !== 'text/csv' && (file.type.split('.')[1] && !file.type.split('.')[1].includes('xls'))) return\n    const type = file.type === 'text/csv' ? 'csv' : 'xlsx'\n\n    const columns = await uploadFile(file.name.split('.')[0], type)\n    console.log({ columns })\n    const newFile = { name: file.name, extension: type, columns }\n\n    this.setState(prevState => ({ files: [...prevState.files, newFile] }))\n  }\n\n  render() {\n    const { nodeIsSelected, files, renderKey, selectModalIsOpen, combineModalIsOpen, modalData } = this.state\n    const { model, engine } = this.props\n    const sideBarProps = { model, addFile: this.addFile, files, refreshRenderKey: this.refreshRenderKey, updateSeletction: this.updateSeletction }\n    const selectModalProps = { isOpen: selectModalIsOpen, toggleModal: this.editNodeHandler, modalData, model }\n    const combineModalProps = { isOpen: combineModalIsOpen, toggleModal: this.editNodeHandler, modalData, model }\n\n    return (\n      <div className='editor'>\n        <Flowchart key={renderKey} engine={engine} />\n        <Sidebar {...sideBarProps} />\n        {nodeIsSelected && <Button onClick={this.editNodeHandler} className='edit-element'>Edit element</Button>}\n        <SelectModal {...selectModalProps} />\n        <CombineModal {...combineModalProps} />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport * as SRD from 'storm-react-diagrams'\n\nimport CssBaseline from '@material-ui/core/CssBaseline'\n\nimport Navbar from './Components/Navbar'\nimport Editor from './Pages/Editor/index';\n\n// Prepare flowchart engine\nconst engine = new SRD.DiagramEngine()\nengine.installDefaultFactories()\nconst model = new SRD.DiagramModel()\nengine.setDiagramModel(model)\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <CssBaseline >\n          <Navbar model={model} />\n          <Editor model={model} engine={engine} />\n        </CssBaseline>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'\n\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}